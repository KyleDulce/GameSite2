/**
 * Gamesite Backend
 * Gamesite backend rest api
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { RoomCreateResponse } from '../model/roomCreateResponse';
import { RoomInfoResponse } from '../model/roomInfoResponse';
import { RoomJoinResponse } from '../model/roomJoinResponse';
import { RoomListing } from '../model/roomListing';
import { UserAuthRequest } from '../model/userAuthRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RestWebControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Invalidates token and session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAuthenticationToken(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAuthenticationToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAuthenticationToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAuthenticationToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/invalidateAuthentication`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a list of available games
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGameList(observe?: 'body', reportProgress?: boolean): Observable<Array<RoomListing>>;
    public getGameList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RoomListing>>>;
    public getGameList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RoomListing>>>;
    public getGameList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application.json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<RoomListing>>('get',`${this.basePath}/api/getGames`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Refreshes the authentication cookie
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRefreshToken(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRefreshToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRefreshToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRefreshToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/refreshToken`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets information about a room
     * 
     * @param roomId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoomInfo(roomId: string, observe?: 'body', reportProgress?: boolean): Observable<RoomInfoResponse>;
    public getRoomInfo(roomId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoomInfoResponse>>;
    public getRoomInfo(roomId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoomInfoResponse>>;
    public getRoomInfo(roomId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling getRoomInfo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RoomInfoResponse>('get',`${this.basePath}/api/roomInfo/${encodeURIComponent(String(roomId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a list of available rooms
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoomLists(observe?: 'body', reportProgress?: boolean): Observable<Array<RoomListing>>;
    public getRoomLists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RoomListing>>>;
    public getRoomLists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RoomListing>>>;
    public getRoomLists(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application.json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<RoomListing>>('get',`${this.basePath}/api/getRoomLists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authenticates the user
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAuth(body: UserAuthRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postAuth(body: UserAuthRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postAuth(body: UserAuthRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postAuth(body: UserAuthRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postAuth.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/authenticate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a room
     * 
     * @param maxLobbySize 
     * @param gameId 
     * @param roomName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCreateRoom(maxLobbySize: number, gameId: string, roomName?: string, observe?: 'body', reportProgress?: boolean): Observable<RoomCreateResponse>;
    public postCreateRoom(maxLobbySize: number, gameId: string, roomName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoomCreateResponse>>;
    public postCreateRoom(maxLobbySize: number, gameId: string, roomName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoomCreateResponse>>;
    public postCreateRoom(maxLobbySize: number, gameId: string, roomName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (maxLobbySize === null || maxLobbySize === undefined) {
            throw new Error('Required parameter maxLobbySize was null or undefined when calling postCreateRoom.');
        }

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling postCreateRoom.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxLobbySize !== undefined && maxLobbySize !== null) {
            queryParameters = queryParameters.set('maxLobbySize', <any>maxLobbySize);
        }
        if (gameId !== undefined && gameId !== null) {
            queryParameters = queryParameters.set('gameId', <any>gameId);
        }
        if (roomName !== undefined && roomName !== null) {
            queryParameters = queryParameters.set('roomName', <any>roomName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RoomCreateResponse>('post',`${this.basePath}/api/createRoom`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Joins a room. Returns whether or not action was successful
     * 
     * @param roomId The id of the room
     * @param asSpectator Whether player should join as a spectator
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postJoinRoom(roomId: string, asSpectator?: boolean, observe?: 'body', reportProgress?: boolean): Observable<RoomJoinResponse>;
    public postJoinRoom(roomId: string, asSpectator?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoomJoinResponse>>;
    public postJoinRoom(roomId: string, asSpectator?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoomJoinResponse>>;
    public postJoinRoom(roomId: string, asSpectator?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling postJoinRoom.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (asSpectator !== undefined && asSpectator !== null) {
            queryParameters = queryParameters.set('asSpectator', <any>asSpectator);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RoomJoinResponse>('post',`${this.basePath}/api/joinRoom/${encodeURIComponent(String(roomId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Leaves a room
     * 
     * @param roomId The id of the room to leave
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postLeaveRoom(roomId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postLeaveRoom(roomId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postLeaveRoom(roomId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postLeaveRoom(roomId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling postLeaveRoom.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/leaveRoom/${encodeURIComponent(String(roomId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
